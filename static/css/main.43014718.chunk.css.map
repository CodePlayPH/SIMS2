{"version":3,"sources":["webpack://src/index.css","webpack://src/pages/auth/auth.scss","webpack://src/components/drawer.scss","webpack://src/pages/dashboard/Dashboard.scss","webpack://src/utils/_breakpoint.scss","webpack://src/pages/dashboard/graphical-representations/graphs.scss","webpack://src/pages/entries/styles.scss","webpack://src/pages/products/AddProd.scss","webpack://src/pages/sizes/Sizes.scss","webpack://src/pages/not_found/NotFound.scss"],"names":[],"mappings":"AAAA,KACE,QAAS,CACT,mJAEY,CACZ,kCAAmC,CACnC,iCACF,CAEA,KACE,yEAEF,CCZA,mBACE,kCAAoC,CACrC,YAIC,wBAAyB,CAC1B,kBAGC,wBAAyB,CAC1B,mBAGG,uBAAyB,CAC5B,aAIC,6BAA+B,CAChC,0BAFC,oBAMF,CAAC,kBAGC,qBAAyB,CACzB,iBAAkB,CACnB,aAGC,uBAAyB,CChC3B,yBACI,UAAc,CAOlB,oEAQQ,uBAAyB,CAC5B,aAKD,oBAAyB,CAC5B,OAKG,UAAc,CACjB,WAGG,uBACgC,CACnC,4BADG,8BASiD,CARpD,iBAGG,oBAAyB,CAEzB,kCAAoC,CAGpC,4CAAiD,CC1CrD,gBACE,gBAAiB,CADnB,6CAOU,4CAAiD,CAP3D,+IAec,cAAe,CAf7B,+BAwBI,eAAgB,CAChB,gBAAiB,CACjB,mBAAoB,CAEpB,0CAAiD,CCkFnD,iDCrGF,mBAEQ,sBAAwB,CAW/B,CDwFC,iDCrGF,2CASY,sBAAwB,CAG/B,CCpBL,kEAEE,uBAAwB,CACxB,QAAS,CACV,mBAIC,yBAA0B,CAC3B,wCASO,gBAAqB,CAP7B,0CAWQ,YAAa,CACb,kBAAmB,CAEnB,oCAdR,0CAeY,yBAAA,CAAA,sBAAA,CAAA,iBAAkB,CASzB,CALO,oCAnBZ,wDAqBgB,mBAAqB,CAE5B,CAvBT,uCA2BQ,sBAAwB,CACxB,qBAAsB,CA5B9B,iDA8BgB,WAAY,CACZ,SAAU,CA/B1B,sCAoCQ,YAAa,CACb,kBAAmB,CArC3B,8CAwCY,YAAa,CACb,UAAW,CACX,WAAY,CACZ,sBAAuB,CA3CnC,mDA+CgB,SAAU,CACV,cAAe,CC5D/B,wBAEQ,gBAAiB,CCFzB,0BAGQ,WAAY,CCHpB,kBACI,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CACnB,qBAAsB,CACtB,YAAa,CALjB,uBAQQ,sBAAwB,CACxB,+BAAiC,CATzC,2BAYY,kBAAmB,CACnB,mBAAqB,CACrB,WAAY,CAEZ,gBAAiB,CACjB,WAAY,CAjBxB,kCAsBY,wBAAyB,CACzB,UAAc,CACd,eAAgB","file":"main.43014718.chunk.css","sourcesContent":["body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n",".MuiGrid-grid-md-5 {\n  background-color: #2E3033 !important;\n}\n\n#btn-submit {\n\n  background-color: #7AE02D;\n}\n\n#btn-submit:hover {\n  background-color: #5DCE1C;\n}\n\n#formControl:focus {\n    color: #499b7d !important;\n}\n\n.white-title {\n  color: #ffffff !important;\n  font-family: poppins !important;\n}\n\n.white-texts {\n  color: #ffffff !important\n}\n\n.white-textFields {\n  background-color: #ffffff;\n  border-radius: 5px;\n}\n\n.white-links {\n  color: #BDBCC1 !important;\n}",".MuiListItemText-primary {\n    color: #ffffff;\n}\n\n.drawer-icon {\n    color: #ffffff !important;\n}\n\n.Mui-selected {\n    .MuiListItemText-root {\n        span {\n            color: #7AE02D !important;\n        }\n        \n    }\n    .drawer-icon {\n        color: #7AE02D !important;\n    }\n    \n}\n\n.drawer-icon {\n    color: #ffffff !important;\n}\n\n\n\n.title {\n    color: #000000;\n}\n\n.logoutBtn {\n    color: #F50057 !important;\n    border-color: #F50057 !important;\n}\n\n.logoutBtn:hover {\n    color: #ffffff !important;\n    border-color: #F50057 !important;\n    background-color: #F50057 !important;\n\n    -webkit-box-shadow: 5px 6px 10px -4px rgba(0, 0, 0, 0.52);\n    box-shadow: 5px 6px 10px -4px rgba(0, 0, 0, 0.52);\n}",".Main-Container {\n  padding-top: 2rem;\n  .top-section {\n    .row {\n      .col {\n        .card {\n          -webkit-box-shadow: 5px 6px 10px -4px rgba(0, 0, 0, 0.52);\n          box-shadow: 5px 6px 10px -4px rgba(0, 0, 0, 0.52);\n          .card-body {\n            .card-logo {\n              .MuiSvgIcon-root {\n                font-size: 32px;\n              }\n            }\n            h5 {\n              font-size: 32px;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  .graph-section {\n    margin-top: 2rem;\n    padding-top: 1rem;\n    padding-bottom: 3rem;\n    -webkit-box-shadow: 5px 0px 15px -4px rgba(0, 0, 0, 0.65);\n    box-shadow: 5px 0px 15px -4px rgba(0, 0, 0, 0.65);\n  }\n}\n","$breakpoints: (\n  \"phone\": 360px,\n  \"tablet\": 768px,\n  \"desktop\": 1366px,\n  \"LGdesktop\": 1920px\n) !default;\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///\t\t'retina2x': (\n///\t\t\t'(-webkit-min-device-pixel-ratio: 2)',\n///\t\t\t'(min-resolution: 192dpi)'\n///\t\t)\n///\t);\n///\n$media-expressions: (\n  \"screen\": \"screen\",\n  \"print\": \"print\",\n  \"handheld\": \"handheld\",\n  \"retina2x\": (\n    \"(-webkit-min-device-pixel-ratio: 2)\",\n    \"(min-resolution: 192dpi)\"\n  ),\n  \"retina3x\": (\n    \"(-webkit-min-device-pixel-ratio: 3)\",\n    \"(min-resolution: 350dpi)\"\n  )\n) !default;\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media(\">128px\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media(\">20em\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media(\">2.0rem\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  \"px\": 1,\n  \"em\": 0.01,\n  \"rem\": 0.1\n) !default;\n///\n/// Generates a media query based on a list of conditions\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media(\">phone\") { }\n///\n/// @example scss - With two set breakpoints\n///  @include media(\">phone\", \"<=tablet\") { }\n///\n/// @example scss - With custom values\n///  @include media(\">=358px\", \"<850px\") { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media(\">desktop\", \"<=1350px\") { }\n///\n/// @example scss - With a static expression\n///  @include media(\"retina2x\") { }\n///\n/// @example scss - Mixing everything\n///  @include media(\">=350px\", \"<tablet\", \"retina3x\") { }\n///\n@mixin media($conditions...) {\n  @for $i from 1 through length($conditions) {\n    $conditions: set-nth(\n      $conditions,\n      $i,\n      parse-expression(nth($conditions, $i))\n    );\n  }\n\n  $branches: get-query-branches($conditions);\n  $query: \"\";\n\n  @each $branch in $branches {\n    @if (str-length($query) != 0) {\n      $query: $query + \", \";\n    }\n\n    $query: $query + $branch;\n  }\n\n  @media #{$query} {\n    @content;\n  }\n}\n\n///\n/// Reads a list of media query expressions and separates logical disjunctions into different branches\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $expressions  - list of expressions\n///\n/// @throws `$expression` is not a valid expression\n///\n/// @return {List | Null}\n///\n@function get-query-branches($expressions) {\n  $result: \"\";\n  $has-groups: false;\n\n  // Getting initial snapshot and looking for groups\n  @each $expression in $expressions {\n    @if (str-length($result) != 0) {\n      $result: $result + \" and \";\n    }\n\n    @if (type-of($expression) == \"string\") {\n      $result: $result + $expression;\n    } @else if (type-of($expression) == \"list\") {\n      $result: $result + nth($expression, 1);\n      $has-groups: true;\n    } @else {\n      @warn '#{$expression} is not a valid expression.';\n    }\n  }\n\n  // If we have groups, we have to create all possible combinations\n  @if $has-groups {\n    @each $expression in $expressions {\n      @if (type-of($expression) == \"list\") {\n        $first: nth($expression, 1);\n\n        @each $member in $expression {\n          @if ($member != $first) {\n            @each $partial in $result {\n              $result: join(\n                $result,\n                str-replace-first($first, $member, $partial)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  @return $result;\n}\n\n///\n/// Parses a string to form a media query expression\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $expression  - expression (in string)\n///\n/// @throws Expression with type `type-of($expression)` detected, string expected\n/// @throws `$expression` is missing an operator\n/// @throws Unknown unit: `$unit`\n///\n/// @return {String | Null}\n///\n@function parse-expression($expression) {\n  $operator: \"\";\n  $value: \"\";\n  $element: \"\";\n  $result: \"\";\n  $is-width: true;\n\n  @if (type-of($expression) != \"string\") {\n    @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\n  }\n\n  // Separating the operator from the rest of the expression\n  @if (str-slice($expression, 2, 2) == \"=\") {\n    $operator: str-slice($expression, 1, 2);\n    $value: str-slice($expression, 3);\n  } @else {\n    $operator: str-slice($expression, 1, 1);\n    $value: str-slice($expression, 2);\n  }\n\n  // Checking what type of expression we're dealing with\n  @if map-has-key($breakpoints, $value) {\n    $result: map-get($breakpoints, $value);\n  } @else if map-has-key($media-expressions, $expression) {\n    $result: map-get($media-expressions, $expression);\n    $is-width: false;\n  } @else {\n    $result: to-number($value);\n  }\n\n  @if ($is-width) {\n    $unit: unit($result);\n    $interval: 0;\n\n    @if (map-has-key($unit-intervals, $unit)) {\n      $interval: map-get($unit-intervals, $unit);\n    } @else {\n      @warn 'Unknown unit: #{$unit}';\n    }\n\n    @if ($operator == \">\") {\n      $element: \"(min-width: #{$result + $interval})\";\n    } @else if ($operator == \"<\") {\n      $element: \"(max-width: #{$result - $interval})\";\n    } @else if ($operator == \">=\") {\n      $element: \"(min-width: #{$result})\";\n    } @else if ($operator == \"<=\") {\n      $element: \"(max-width: #{$result})\";\n    } @else {\n      @warn '#{$expression} is missing an operator.';\n    }\n  } @else {\n    $element: $result;\n  }\n\n  @return $element;\n}\n\n///\n/// Replaces the first occurence of the string with the replacement string\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $search  - The value being searched for\n/// @param {String}   $replace  - The replacement string\n/// @param {String}   $subject  - The string being replaced on\n///\n/// @return {String | Null}\n///\n@function str-replace-first($search, $replace, $subject) {\n  $search-start: str-index($subject, $search);\n\n  @if $search-start == null {\n    @return $subject;\n  }\n\n  $result: str-slice($subject, 0, $search-start - 1);\n  $result: $result + $replace;\n  $result: $result + str-slice($subject, $search-start + str-length($search));\n\n  @return $result;\n}\n\n///\n/// Casts a number to a string\n///\n/// @author Hugo Giraudel\n///\n/// @param {String}   $string  - Number to be parsed\n///\n/// @return {List | Null}\n///\n@function to-number($string) {\n  // Matrices\n  $strings: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\";\n  $numbers: 0 1 2 3 4 5 6 7 8 9;\n\n  // Result\n  $result: 0;\n  $divider: 0;\n  $minus: false;\n\n  // Looping through all characters\n  @for $i from 1 through str-length($string) {\n    $character: str-slice($string, $i, $i);\n    $index: index($strings, $character);\n\n    @if $character == \"-\" {\n      $minus: true;\n    } @else if $character == \".\" {\n      $divider: 1;\n    } @else {\n      @if type-of($index) != \"number\" {\n        $result: if($minus, $result * -1, $result);\n        @return _length($result, str-slice($string, $i));\n      }\n\n      $number: nth($numbers, $index);\n\n      @if $divider == 0 {\n        $result: $result * 10;\n      } @else {\n        // Move the decimal dot to the left\n        $divider: $divider * 10;\n        $number: $number / $divider;\n      }\n\n      $result: $result + $number;\n    }\n  }\n\n  @return if($minus, $result * -1, $result);\n}\n\n@function _length($number, $unit) {\n  $strings: \"px\" \"cm\" \"mm\" \"%\" \"ch\" \"pica\" \"in\" \"em\" \"rem\" \"pt\" \"pc\" \"ex\" \"vw\"\n    \"vh\" \"vmin\" \"vmax\";\n  $units: 1px 1cm 1mm 1% 1ch 1pica 1in 1em 1rem 1pt 1pc 1ex 1vw 1vh 1vmin 1vmax;\n  $index: index($strings, $unit);\n\n  @if type-of($index) != \"number\" {\n    @warn 'Unknown unit `#{$unit}`.';\n    @return false;\n  }\n\n  @return $number * nth($units, $index);\n}\n\n/**\n*\n* Testing\n*\n**/","@import '../../../utils/breakpoint';\n// Breakpoints Guidlines ***********\n// \"phone\": 360px,\n// \"tablet\": 768px,\n// \"desktop\": 1366px,\n// \"LGdesktop\": 1920px\n// Breakpoints Guidlines ***********\n\n// Bar Graph\n.mainBar-container {\n    @include media(\">desktop\", \"<=LGdesktop\") {\n        height: 328px !important;\n    }\n    \n    h3 {}\n\n    .chartjs-render-monitor {\n        @include media(\">desktop\", \"<=LGdesktop\") {\n            height: 285px !important;\n        }\n        \n    }\n}","/* Chrome, Safari, Edge, Opera */\ninput::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n\n/* Firefox */\ninput[type=number] {\n  -moz-appearance: textfield;\n}\n\n.entry-main-container {\n\n    .entry-title-row {\n\n    }\n\n    .entry-number-row {\n        padding: 0 17% 2% 17%;\n    }\n\n    .entry-select-input {\n        display: flex;\n        flex-direction: row;\n        \n        @media screen and (max-width: 768px) {\n            width: fit-content;\n        }\n\n        .entry-select {\n            @media screen and (max-width: 768px) {\n                \n                width: 50% !important;\n            }\n        }\n    }\n\n    .entry-text-area {\n        display: flex !important;\n        flex-direction: column;\n            .txt-area {\n                margin: auto;\n                width: 65%;\n            }\n    }\n\n    .btns-container {\n        display: flex;\n        flex-direction: row;\n\n        .col-sm {\n            display: flex;\n            padding: 2%;\n            margin: auto;\n            justify-content: center;\n            // width: 10% !important;\n            \n            .btn {\n                width: 25%;\n                margin-left: 1%;\n            }\n        }\n    }\n}",".addProd-container {\n    .row {\n        text-align: right;\n    }\n    \n}",".size-container {\n    .snackBar {\n        // margin-top: 5%;\n        z-index: 999;\n    }\n}",".ForOForContainer {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    height: 100vh;\r\n    \r\n    .row {\r\n        display: flex !important;\r\n        flex-direction: column !important;\r\n\r\n        img {\r\n            align-items: center;\r\n            width: 90% !important;\r\n            height: 100%;\r\n            -o-object-fit: cover;\r\n            object-fit: cover;\r\n            margin: auto;\r\n\r\n        }\r\n\r\n        .fourOfour {\r\n            background-color: #F50057;\r\n            color: #ffffff;\r\n            margin-top: 1rem;\r\n        }\r\n    }\r\n}"]}